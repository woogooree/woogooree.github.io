{"componentChunkName":"component---src-templates-blog-template-js","path":"/csharp_01/","result":{"data":{"cur":{"id":"cc381e79-cf58-5d2b-960f-c8c27c3e4998","html":"<h2 id=\"형변환\" style=\"position:relative;\"><a href=\"#%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형변환</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">int i = 10;\ndouble b = i; // 컴파일러가 자동으로 암시적 변환 (더 큰 자료형)\n\ndouble d = 10.5;\nint i = (int)d; // 명시적 형 변환 (자료구조가 같은 형태만)\n</code></pre></div>\n<h2 id=\"박싱과-언박싱\" style=\"position:relative;\"><a href=\"#%EB%B0%95%EC%8B%B1%EA%B3%BC-%EC%96%B8%EB%B0%95%EC%8B%B1\" aria-label=\"박싱과 언박싱 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>박싱과 언박싱</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">// Boxing (값 형식을 참조 형식으로 변환)\nobject obj = 123;\n\n// Unboxing (참조 형식을 값 형식으로 변환)\nint i = (int)obj;\n\n// 박싱은 값 형식을 참조 형식으로 변환하느라 메모리 할당 및 복사가 일어나서 성능에 부담을 주게 되므로 자주 사용하지 않음</code></pre></div>\n<h2 id=\"as-operator-참조-형식을-다른-참조형식으로-변환-실패시-null-반환\" style=\"position:relative;\"><a href=\"#as-operator-%EC%B0%B8%EC%A1%B0-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%8B%A4%EB%A5%B8-%EC%B0%B8%EC%A1%B0%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-%EC%8B%A4%ED%8C%A8%EC%8B%9C-null-%EB%B0%98%ED%99%98\" aria-label=\"as operator 참조 형식을 다른 참조형식으로 변환 실패시 null 반환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>as operator (참조 형식을 다른 참조형식으로 변환, 실패시 null 반환)</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">\nvoid BoxingUnboxing(object obj)\n{\n\tButton? button = obj as Button; // as Button 형태인 경우에만 button에 저장하고 아닐 경우 null 값을 저장하기 때문에 Button? 자료형로 선언함\n\tif (button != null)\n\t{\n\t\tConsole.WriteLine(button.GetString());\n\t}\n\telse\n\t{\n\t\tConsole.WriteLine(&quot;button is null&quot;);\n\t}\n\t\n}\n\nBoxingUnboxing(new Button()); // 이렇게 버튼 형으로 언박싱하면 button으로 취급되고 하지 않으면 null로 적용됨\n\n</code></pre></div>\n<h2 id=\"convert-데이터-타입-변환\" style=\"position:relative;\"><a href=\"#convert-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\" aria-label=\"convert 데이터 타입 변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Convert (데이터 타입 변환)</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">string s = &quot;10.5&quot;;\ndouble d = Convert.ToDouble(s); // Convert를 사용하면 형태가 다른 자료형도 변환이 가능하다.\n\ndouble d2 = double.Parse(s); // Parse 를 사용해도 같다.\n\n// 유효성을 체크한 후 넘기고 싶다면 try.Parse 사용\ndouble.tryParse(s, out double d);\nint.tryParse(s, out int i); //10.5 는 int 형식이 아니기에 0이 반환됨\n\nif (int.tryParse(s, out int i))\n{\n\tconsole.WriteLine(&quot;변환성공&quot;)\n} \nelse\n{\n\tconsole.WriteLine(&quot;변환실패&quot;) // 실패한 것으로 취급하고 이게 출력됨\n}</code></pre></div>\n<h2 id=\"배열-형변환\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%EC%97%B4-%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"배열 형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열 형변환</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">class Animal\n{\n\tpublic string Name { get; set; } = default;\n}\n\nclass Cat : Animal { }\nclass Dog : Animal { }\nclass Pig : Animal { }\nclass Tiger : Animal { }\n\nList&lt;Animal&gt; animals = new()\n{\n\tnew Cat {Name = &quot;냐옹이1&quot;},\n\tnew Cat {Name = &quot;냐옹이2&quot;},\n\tnew Cat {Name = &quot;냐옹이3&quot;},\n};\n\n// Cast\nList&lt;Cat&gt; cats = animals.Cast&lt;Cat&gt;().ToList(); // Cat이 아닌 형태가 있으면 오류가 남\n\n// ofType : 리스트에 Cat, Dog 등 섞여 있을 때 Cat 만 추출함\nList&lt;Cat&gt; cats = animals.ofType&lt;Cat&gt;().ToList();\n\nforeach (Cat cat in cats)\n{\n\tConsole.WriteLine(cat.Name);\n}</code></pre></div>\n<h2 id=\"데이터-타입\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\" aria-label=\"데이터 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 타입</h2>\n<p>int == System.Int32\nstring == System.String\nbool == System.Boolean</p>\n<p>object : C# 모든 데이터 타입의 최상위 기본 클래스, 박싱/언박싱 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">//명시적 변수 선언\nint n = 123; //초기화\nstring name;\nfloat s;\n\n//암시적 변수 선언(초기화 필수)\nvar number = 123;\nvar name = &quot;홍길동&quot;;\nvar c = &#39;가&#39;;\nvar score = 10.5; // double로 가변됨</code></pre></div>\n<h2 id=\"리터럴\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\" aria-label=\"리터럴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리터럴</h2>\n<p>소스 코드에서 값을 나타내는 고정된 값\n컴파일 시간에 값을 결정함\n실행 시간에 변경 되지 않음</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">int x = 10; // 10은 정수형 리터럴\n\n//리터럴이 아닌 것은?\nint z = x * y; // x와 y가 아직 안정해졌으므로 리터럴이 아님\nstring? str = Console.ReadLine(); // 입력값 받기\nConsole.WriteLine(11d.GetType()); // 아직 안정해져서 리터럴이 아님\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">// 숫자형 접미사\nvar longValue = 10f; // 자료형을 알려주는 접미사 </code></pre></div>\n<h2 id=\"스택-메모리\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"스택 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 메모리</h2>\n<p>스택 메모리는 함수 호출과 관련된 변수, 지역 볓수 및 매게변수를 저장하는 데 사용됨 (후입선출 방식으로 관리됨, 메모리 할당과 해제가 자동이며 매우 빠름)</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">void MyMethod()\n{\n\tint i = 123; // 4바이트 스택 메모리 할당\n}</code></pre></div>\n<h2 id=\"힙-메모리\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"힙 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 메모리</h2>\n<p>프로그램 실행 도중 동적으로 할당되고 해제되는 변수와 데이터를 저장하는 데 사용됨 (메모리 할당과 해제를 명시적으로 프로그래머가 수행해야하지만 C#에서는 GC가 자동으로 처리함)</p>\n<p>클래스, 인터페이스, 배열, 대리자, 객체, 문자열 등이 C# 참조 형식임</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">var p1 = new Person() { name = &quot;홍&quot; }\nvar p2 = new person() { name = &quot;김&quot; }</code></pre></div>\n<h2 id=\"index-찾기\" style=\"position:relative;\"><a href=\"#index-%EC%B0%BE%EA%B8%B0\" aria-label=\"index 찾기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index 찾기</h2>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">string str = &quot;Hi, Good Morning&quot;;\n\n//IndexOf : 어디 있는지 찾아줌\nint i = str.IndexOf(&quot;Good&quot;) // 찾지 못하면 -1 반환\nint i_ = str.LastIndexOf(&quot;Good&quot;) // 뒤에서부터 찾음\n\n//StartsWith &amp; EndsWith : 지정된 걸로 시작/끝 나는지 확인\nbool result = str.StartsWith(&quot;Hi&quot;);\nbool result_ = strEndsWith(&quot;Hi&quot;); // False\n\n//Contains : 존재하는지 알려줌\nbool result = str.Contains(&quot;Morning&quot;); //True\nbool reseult_ = str.Contains(&quot;morning&quot;); //False\n\n// 지정된 문자열을 찾아 다른 문자열을 변환\nstring result = str.Replace(&quot;Morning&quot;, &quot;evening&quot;)</code></pre></div>\n<p>(출처) 유튜브 - 까불이코더 님</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%98%95%EB%B3%80%ED%99%98\">형변환</a></li>\n<li><a href=\"#%EB%B0%95%EC%8B%B1%EA%B3%BC-%EC%96%B8%EB%B0%95%EC%8B%B1\">박싱과 언박싱</a></li>\n<li><a href=\"#as-operator-%EC%B0%B8%EC%A1%B0-%ED%98%95%EC%8B%9D%EC%9D%84-%EB%8B%A4%EB%A5%B8-%EC%B0%B8%EC%A1%B0%ED%98%95%EC%8B%9D%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98-%EC%8B%A4%ED%8C%A8%EC%8B%9C-null-%EB%B0%98%ED%99%98\">as operator (참조 형식을 다른 참조형식으로 변환, 실패시 null 반환)</a></li>\n<li><a href=\"#convert-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85-%EB%B3%80%ED%99%98\">Convert (데이터 타입 변환)</a></li>\n<li><a href=\"#%EB%B0%B0%EC%97%B4-%ED%98%95%EB%B3%80%ED%99%98\">배열 형변환</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85\">데이터 타입</a></li>\n<li><a href=\"#%EB%A6%AC%ED%84%B0%EB%9F%B4\">리터럴</a></li>\n<li><a href=\"#%EC%8A%A4%ED%83%9D-%EB%A9%94%EB%AA%A8%EB%A6%AC\">스택 메모리</a></li>\n<li><a href=\"#%ED%9E%99-%EB%A9%94%EB%AA%A8%EB%A6%AC\">힙 메모리</a></li>\n<li><a href=\"#index-%EC%B0%BE%EA%B8%B0\">Index 찾기</a></li>\n</ul>\n</div>","excerpt":"형변환 박싱과 언박싱 as operator (참조 형식을 다른 참조형식으로 변환, 실패시 null 반환) Convert (데이터 타입 변환) 배열 형변환 데이터 타입 int == System.Int32\nstring == System.String\nbool == System.Boolean object : C# 모든 데이터 타입의 최상위 기본 클래스, 박싱/언박싱 가능 리터럴 소스 코드에서 값을 나타내는 고정된 값\n컴파일 시간에 값을 결정함\n실행 시간에 변경 되지 않음 스택 메모리 스택 메모리는 함수 호출과 관련된 변수, 지역 볓수 및 매게변수를 저장하는 데 사용됨 (후입선출 방식으로 관리됨, 메모리 할당과 해제가 자동이며 매우 빠름) 힙 메모리 프로그램 실행 도중 동적으로 할당되고 해제되는 변수와 데이터를 저장하는 데 사용됨 (메모리 할당과 해제를 명시적으로 프로그래머가 수행해야하지만 C#에서는 GC가 자동으로 처리함) 클래스, 인터페이스, 배열, 대리자, 객체, 문자열 등이 C# 참…","frontmatter":{"date":"June 03, 2024","title":"C# 데이터타입과 형변환","categories":"기초공부","author":"심우진","emoji":"💡"},"fields":{"slug":"/csharp_01/"}},"next":{"id":"a2bb6b59-dc19-5009-8019-393e39c2a63b","html":"<h2 id=\"들어가기-전에-힙과-스택부터-알기\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90-%ED%9E%99%EA%B3%BC-%EC%8A%A4%ED%83%9D%EB%B6%80%ED%84%B0-%EC%95%8C%EA%B8%B0\" aria-label=\"들어가기 전에 힙과 스택부터 알기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기 전에 힙과 스택부터 알기</h2>\n<p>힙(Heap)과 스택(Stack)은 프로그램 실행 중에 메모리를 관리하는 두 가지 주요 영역이다.\r\n이 두 영역은 메모리 할당과 해제, 사용 방식에서 차이가 있다.</p>\n<h3 id=\"스택-메모리\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%83%9D-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"스택 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스택 메모리</h3>\n<h4 id=\"특징\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95\" aria-label=\"특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h4>\n<ul>\n<li><strong>고정 크기</strong>: 스택 메모리는 일반적으로 프로그램이 시작될 때 고정된 크기로 할당된다.</li>\n<li><strong>빠른 할당 및 해제</strong>: 메모리 할당과 해제는 매우 빠르게 이루어진다. 함수 호출 시 스택 프레임이 생성되고 함수가 종료되면 자동으로 해제된다.</li>\n<li><strong>LIFO 구조</strong>: 스택은 Last In, First Out(LIFO) 구조를 따른다. 가장 최근에 할당된 메모리가 가장 먼저 해제된다.</li>\n</ul>\n<h4 id=\"용도\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EB%8F%84\" aria-label=\"용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용도</h4>\n<ul>\n<li><strong>지역 변수</strong>: 함수 내에서 선언된 변수는 스택에 저장된다.</li>\n<li><strong>함수 호출 정보</strong>: 함수 호출 시 전달된 인수, 복귀 주소, 그리고 함수 실행을 위한 로컬 변수가 스택에 저장된다.</li>\n</ul>\n<h4 id=\"예제\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C\" aria-label=\"예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> localVar <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 지역 변수는 스택에 저장됨</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"지역 변수: %d\\n\"</span><span class=\"token punctuation\">,</span> localVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 호출 시 스택 프레임 생성</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 종료 시 스택 프레임 해제</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 예제에서 <code class=\"language-text\">localVar</code>는 함수 <code class=\"language-text\">foo</code>의 스택에 저장된다. <code class=\"language-text\">foo</code>가 호출될 때 스택 프레임이 생성되고, <code class=\"language-text\">foo</code>가 종료될 때 스택 프레임이 해제된다.</p>\n<h3 id=\"힙-메모리\" style=\"position:relative;\"><a href=\"#%ED%9E%99-%EB%A9%94%EB%AA%A8%EB%A6%AC\" aria-label=\"힙 메모리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙 메모리</h3>\n<h4 id=\"특징-1\" style=\"position:relative;\"><a href=\"#%ED%8A%B9%EC%A7%95-1\" aria-label=\"특징 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>특징</h4>\n<ul>\n<li><strong>동적 크기</strong>: 힙 메모리는 런타임 시 동적으로 할당되며, 필요에 따라 크기를 조정할 수 있다.</li>\n<li><strong>느린 할당 및 해제</strong>: 힙 메모리의 할당과 해제는 스택에 비해 느리다. 할당된 메모리는 명시적으로 해제해야 한다.</li>\n<li><strong>비구조적</strong>: 힙 메모리는 비구조적이며, 임의의 순서로 할당 및 해제될 수 있다.</li>\n</ul>\n<h4 id=\"용도-1\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EB%8F%84-1\" aria-label=\"용도 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용도</h4>\n<ul>\n<li><strong>동적 메모리 할당</strong>: 런타임 시 크기가 결정되는 데이터 구조(예: 배열, 링크드 리스트 등)는 힙에 저장된다.</li>\n<li><strong>크기가 큰 데이터</strong>: 큰 데이터는 스택에 저장하기 어렵기 때문에 힙에 저장된다.</li>\n</ul>\n<h4 id=\"예제-1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C-1\" aria-label=\"예제 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제</h4>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 힙에 정수형 배열 동적 할당</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 초기화 및 출력</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 힙 메모리 해제</span>\r\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 예제에서 <code class=\"language-text\">malloc</code> 함수를 사용하여 힙에 정수형 배열을 동적 할당하고, <code class=\"language-text\">free</code> 함수를 사용하여 할당된 메모리를 해제한다.</p>\n<h3 id=\"비교\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EA%B5%90\" aria-label=\"비교 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비교</h3>\n<table>\n<thead>\n<tr>\n<th>특징</th>\n<th>스택(Stack)</th>\n<th>힙(Heap)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>메모리 할당</td>\n<td>자동</td>\n<td>수동 (<code class=\"language-text\">malloc</code>, <code class=\"language-text\">free</code>)</td>\n</tr>\n<tr>\n<td>할당 속도</td>\n<td>빠름</td>\n<td>느림</td>\n</tr>\n<tr>\n<td>메모리 크기</td>\n<td>고정 크기</td>\n<td>동적 크기</td>\n</tr>\n<tr>\n<td>메모리 구조</td>\n<td>LIFO</td>\n<td>비구조적</td>\n</tr>\n<tr>\n<td>사용 용도</td>\n<td>지역 변수, 함수 호출 정보</td>\n<td>동적 데이터 구조, 큰 데이터</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li><strong>스택</strong>은 함수 호출 시 자동으로 할당되고 해제되는 고정 크기 메모리 영역이다. 주로 지역 변수와 함수 호출 정보를 저장한다.</li>\n<li><strong>힙</strong>은 런타임 시 동적으로 할당되고 명시적으로 해제되는 메모리 영역이다. 주로 동적 데이터 구조와 큰 데이터를 저장한다.</li>\n</ul>\n<h2 id=\"동적-메모리-관리-dynamic-memory-management\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-dynamic-memory-management\" aria-label=\"동적 메모리 관리 dynamic memory management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 메모리 관리 (Dynamic Memory Management)</h2>\n<h3 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>동적 메모리를 사용하면 런타임 시에 필요한 만큼의 메모리를 할당하고, 더 이상 필요하지 않을 때 메모리를 해제할 수 있다.</p>\n<h3 id=\"1-malloc-함수\" style=\"position:relative;\"><a href=\"#1-malloc-%ED%95%A8%EC%88%98\" aria-label=\"1 malloc 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. malloc 함수</h3>\n<p><code class=\"language-text\">malloc</code> 함수는 요청한 크기만큼의 메모리를 힙(heap)에서 할당한다. 성공적으로 메모리를 할당하면 메모리 블록의 시작 주소를 반환하고, 실패하면 <code class=\"language-text\">NULL</code>을 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// n개의 정수형 공간을 동적 할당</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 메모리 할당 성공, 배열 초기화</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 요소 출력</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 동적 할당된 메모리 해제</span>\r\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-calloc-함수\" style=\"position:relative;\"><a href=\"#2-calloc-%ED%95%A8%EC%88%98\" aria-label=\"2 calloc 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. calloc 함수</h3>\n<p><code class=\"language-text\">calloc</code> 함수는 <code class=\"language-text\">malloc</code> 함수와 유사하지만, 할당된 메모리를 0으로 초기화한다. <code class=\"language-text\">calloc</code> 함수는 두 개의 인수를 받는다: 할당할 요소의 개수와 각 요소의 크기.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// n개의 정수형 공간을 동적 할당 및 초기화</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">calloc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 요소 출력</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 동적 할당된 메모리 해제</span>\r\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-realloc-함수\" style=\"position:relative;\"><a href=\"#3-realloc-%ED%95%A8%EC%88%98\" aria-label=\"3 realloc 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. realloc 함수</h3>\n<p><code class=\"language-text\">realloc</code> 함수는 이미 할당된 메모리 블록의 크기를 변경한다. 새로운 크기가 기존 크기보다 크면 추가 메모리는 초기화되지 않은 상태로 남아 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// n개의 정수형 공간을 동적 할당</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 초기화</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 크기를 두 배로 재할당</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 재할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 추가된 공간 초기화</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 요소 출력</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 동적 할당된 메모리 해제</span>\r\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-free-함수\" style=\"position:relative;\"><a href=\"#4-free-%ED%95%A8%EC%88%98\" aria-label=\"4 free 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. free 함수</h3>\n<p><code class=\"language-text\">free</code> 함수는 동적 할당된 메모리를 해제한다. 할당된 메모리를 더 이상 사용하지 않을 때는 반드시 <code class=\"language-text\">free</code> 함수를 호출하여 메모리 누수를 방지해야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// n개의 정수형 공간을 동적 할당</span>\r\n    arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"메모리 할당 실패\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    <span class=\"token comment\">// 배열 초기화 및 출력</span>\r\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 동적 할당된 메모리 해제</span>\r\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"주의사항\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"주의사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h3>\n<ul>\n<li>메모리 할당 실패를 항상 확인해야 한다.</li>\n<li>동적 할당된 메모리는 사용 후 반드시 <code class=\"language-text\">free</code> 함수로 해제해야 한다.</li>\n<li>이미 해제된 메모리에 접근하는 것은 위험하며, 프로그램 오류를 일으킬 수 있다.</li>\n</ul>\n<h2 id=\"함수-포인터-function-pointers\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-function-pointers\" aria-label=\"함수 포인터 function pointers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 포인터 (Function Pointers)</h2>\n<h3 id=\"개요-1\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94-1\" aria-label=\"개요 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>함수 포인터는 함수의 주소를 저장하는 포인터로, 런타임에 함수를 동적으로 호출할 수 있는 유연성을 제공한다. 함수 포인터를 사용하면 함수 테이블을 만들거나, 콜백 함수를 구현할 수 있다.</p>\n<h3 id=\"1-함수-포인터-선언과-사용\" style=\"position:relative;\"><a href=\"#1-%ED%95%A8%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%84%A0%EC%96%B8%EA%B3%BC-%EC%82%AC%EC%9A%A9\" aria-label=\"1 함수 포인터 선언과 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 함수 포인터 선언과 사용</h3>\n<p>함수 포인터는 함수의 시그니처를 따라 선언한다. 예를 들어, 두 개의 <code class=\"language-text\">int</code> 인수를 받아 <code class=\"language-text\">int</code>를 반환하는 함수 포인터는 다음과 같이 선언할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n\r\n<span class=\"token comment\">// 두 정수의 합을 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 함수 포인터 선언 및 초기화</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 함수 포인터를 사용하여 함수 호출</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 + 5 = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"2-콜백-함수\" style=\"position:relative;\"><a href=\"#2-%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\" aria-label=\"2 콜백 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 콜백 함수</h3>\n<p>콜백 함수는 다른 함수의 인수로 전달되는 함수로, 이벤트 기반 프로그래밍에서 자주 사용된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n\r\n<span class=\"token comment\">// 두 정수의 합을 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 두 정수의 곱을 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 두 정수에 대해 연산을 수행하는 함수</span>\r\n<span class=\"token keyword\">void</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>operation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"결과: %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 합을 구하는 콜백 함수 호출</span>\r\n    <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 곱을 구하는 콜백 함수 호출</span>\r\n    <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span>multiply<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-함수-테이블\" style=\"position:relative;\"><a href=\"#3-%ED%95%A8%EC%88%98-%ED%85%8C%EC%9D%B4%EB%B8%94\" aria-label=\"3 함수 테이블 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 함수 테이블</h3>\n<p>함수 테이블은 함수 포인터 배열을 사용하여 여러 함수를 저장하고, 런타임에 동적으로 호출할 수 있는 구조를 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n\r\n<span class=\"token comment\">// 두 정수의 합을 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 두 정수의 차를 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// 두 정수의 곱을 구하는 함수</span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token comment\">// 함수 포인터 배열 선언 및 초기화</span>\r\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>operations<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>add<span class=\"token punctuation\">,</span> subtract<span class=\"token punctuation\">,</span> multiply<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token comment\">// 함수 포인터 배열을 사용하여 함수 호출</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 + 5 = %d\\n\"</span><span class=\"token punctuation\">,</span> operations<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 - 5 = %d\\n\"</span><span class=\"token punctuation\">,</span> operations<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 * 5 = %d\\n\"</span><span class=\"token punctuation\">,</span> operations<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"주의사항-1\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-1\" aria-label=\"주의사항 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의사항</h3>\n<ul>\n<li>함수 포인터를 사용할 때 시그니처가 일치하는지 확인해야 한다.</li>\n<li>함수 포인터 배열을 사용할 때는 인덱스 범위를 벗어나지 않도록 주의해야 한다.</li>\n<li>잘못된 함수 포인터 사용은 프로그램 오류를 일으킬 수 있다.</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84%EC%97%90-%ED%9E%99%EA%B3%BC-%EC%8A%A4%ED%83%9D%EB%B6%80%ED%84%B0-%EC%95%8C%EA%B8%B0\">들어가기 전에 힙과 스택부터 알기</a></p>\n<ul>\n<li>\n<p><a href=\"#%EC%8A%A4%ED%83%9D-%EB%A9%94%EB%AA%A8%EB%A6%AC\">스택 메모리</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B9%EC%A7%95\">특징</a></li>\n<li><a href=\"#%EC%9A%A9%EB%8F%84\">용도</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%9E%99-%EB%A9%94%EB%AA%A8%EB%A6%AC\">힙 메모리</a></p>\n<ul>\n<li><a href=\"#%ED%8A%B9%EC%A7%95-1\">특징</a></li>\n<li><a href=\"#%EC%9A%A9%EB%8F%84-1\">용도</a></li>\n<li><a href=\"#%EC%98%88%EC%A0%9C-1\">예제</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B9%84%EA%B5%90\">비교</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9A%94%EC%95%BD\">요약</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%99%EC%A0%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-dynamic-memory-management\">동적 메모리 관리 (Dynamic Memory Management)</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#1-malloc-%ED%95%A8%EC%88%98\">1. malloc 함수</a></li>\n<li><a href=\"#2-calloc-%ED%95%A8%EC%88%98\">2. calloc 함수</a></li>\n<li><a href=\"#3-realloc-%ED%95%A8%EC%88%98\">3. realloc 함수</a></li>\n<li><a href=\"#4-free-%ED%95%A8%EC%88%98\">4. free 함수</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\">주의사항</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%ED%95%A8%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-function-pointers\">함수 포인터 (Function Pointers)</a></p>\n<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94-1\">개요</a></li>\n<li><a href=\"#1-%ED%95%A8%EC%88%98-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%84%A0%EC%96%B8%EA%B3%BC-%EC%82%AC%EC%9A%A9\">1. 함수 포인터 선언과 사용</a></li>\n<li><a href=\"#2-%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98\">2. 콜백 함수</a></li>\n<li><a href=\"#3-%ED%95%A8%EC%88%98-%ED%85%8C%EC%9D%B4%EB%B8%94\">3. 함수 테이블</a></li>\n<li><a href=\"#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-1\">주의사항</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 02, 2024","title":"C언어 동적 메모리 관리와 함수 포인터","categories":"기초공부","author":"심우진","emoji":"📚"},"fields":{"slug":"/c_02/"}},"prev":{"id":"be5685f3-f54d-58a6-ab9b-5ed7658240ee","html":"<h2 id=\"데브옵스-기본-개념-이해\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4\" aria-label=\"데브옵스 기본 개념 이해 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데브옵스 기본 개념 이해</h2>\n<p>데브옵스(DevOps)는 개발(Development)과 운영(Operations)의 합성어로, 소프트웨어 개발과 IT 운영을 하나로 통합하는 방법론이다. 데브옵스의 목표는 소프트웨어 개발 주기를 단축하고 높은 품질의 소프트웨어를 빠르게 제공하는 것이다. 이를 위해 자동화, 지속적 통합/지속적 배포(CI/CD), 협업 도구 등을 활용한다.</p>\n<h2 id=\"데브옵스-엔지니어의-역할과-책임\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EC%9D%98-%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84\" aria-label=\"데브옵스 엔지니어의 역할과 책임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데브옵스 엔지니어의 역할과 책임</h2>\n<h3 id=\"1-지속적-통합-및-지속적-배포cicd-파이프라인-구축-및-관리\" style=\"position:relative;\"><a href=\"#1-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9-%EB%B0%8F-%EC%A7%80%EC%86%8D%EC%A0%81-%EB%B0%B0%ED%8F%ACcicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%B6%95-%EB%B0%8F-%EA%B4%80%EB%A6%AC\" aria-label=\"1 지속적 통합 및 지속적 배포cicd 파이프라인 구축 및 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 지속적 통합 및 지속적 배포(CI/CD) 파이프라인 구축 및 관리</h3>\n<p>데브옵스 엔지니어는 자동화된 빌드, 테스트, 배포 파이프라인을 설계하고 구현하여 소프트웨어 개발 주기를 단축시킨다. 이를 통해 코드 변경 사항이 신속하고 안전하게 배포될 수 있도록 한다.</p>\n<h3 id=\"2-인프라-관리-및-모니터링\" style=\"position:relative;\"><a href=\"#2-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-label=\"2 인프라 관리 및 모니터링 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 인프라 관리 및 모니터링</h3>\n<p>클라우드 서비스(AWS, Azure, GCP 등)를 이용해 인프라를 구축하고 관리한다. Infrastructure as Code(IaC) 도구(Terraform, CloudFormation 등)를 사용해 인프라를 코드로 관리하며, Prometheus, Grafana, ELK 스택 등을 활용해 시스템과 애플리케이션의 성능을 모니터링한다.</p>\n<h3 id=\"3-컨테이너화-및-오케스트레이션\" style=\"position:relative;\"><a href=\"#3-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%ED%99%94-%EB%B0%8F-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"3 컨테이너화 및 오케스트레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 컨테이너화 및 오케스트레이션</h3>\n<p>Docker를 사용해 애플리케이션을 컨테이너화하고, Kubernetes를 이용해 컨테이너화된 애플리케이션을 오케스트레이션한다. 이를 통해 애플리케이션의 이식성과 확장성을 높인다.</p>\n<h3 id=\"4-자동화-및-스크립팅\" style=\"position:relative;\"><a href=\"#4-%EC%9E%90%EB%8F%99%ED%99%94-%EB%B0%8F-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\" aria-label=\"4 자동화 및 스크립팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 자동화 및 스크립팅</h3>\n<p>반복적인 작업을 자동화하기 위해 스크립트를 작성하고, CI/CD 파이프라인, 인프라 관리, 모니터링 작업 등을 자동화한다. Python, Bash, Ruby 등의 스크립트 언어를 사용한다.</p>\n<h3 id=\"5-협업-및-커뮤니케이션\" style=\"position:relative;\"><a href=\"#5-%ED%98%91%EC%97%85-%EB%B0%8F-%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\"5 협업 및 커뮤니케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 협업 및 커뮤니케이션</h3>\n<p>개발팀, IT 운영팀과 긴밀하게 협력하여 원활한 소프트웨어 배포와 운영을 지원한다. GitHub, GitLab 등의 버전 관리 도구와 협업 도구를 사용해 코드 변경 사항을 관리하고, 팀 내 커뮤니케이션을 원활하게 한다.</p>\n<h3 id=\"6-보안-강화\" style=\"position:relative;\"><a href=\"#6-%EB%B3%B4%EC%95%88-%EA%B0%95%ED%99%94\" aria-label=\"6 보안 강화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 보안 강화</h3>\n<p>CI/CD 파이프라인과 인프라에 보안 조치를 구현하고, 보안 취약점을 식별 및 해결한다. 코드 스캔, 보안 테스트, 접근 제어 등 다양한 보안 방안을 적용해 시스템의 보안을 강화한다.</p>\n<h3 id=\"7-문제-해결-및-최적화\" style=\"position:relative;\"><a href=\"#7-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%8F-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"7 문제 해결 및 최적화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 문제 해결 및 최적화</h3>\n<p>시스템 및 애플리케이션의 성능 문제를 분석하고 해결하며, 인프라와 배포 파이프라인을 최적화한다. 이를 통해 시스템의 안정성과 효율성을 높인다.</p>\n<h3 id=\"8-문서화\" style=\"position:relative;\"><a href=\"#8-%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"8 문서화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 문서화</h3>\n<p>구축한 시스템, 파이프라인, 인프라에 대한 문서를 작성하고 유지 관리한다. 이를 통해 팀원들이 시스템을 이해하고 사용할 수 있도록 돕는다.</p>\n<h2 id=\"도움-되는-공부들은\" style=\"position:relative;\"><a href=\"#%EB%8F%84%EC%9B%80-%EB%90%98%EB%8A%94-%EA%B3%B5%EB%B6%80%EB%93%A4%EC%9D%80\" aria-label=\"도움 되는 공부들은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>도움 되는 공부들은?</h2>\n<h3 id=\"리눅스-및-시스템-관리\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%B0%8F-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B4%80%EB%A6%AC\" aria-label=\"리눅스 및 시스템 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리눅스 및 시스템 관리</h3>\n<p>데브옵스 엔지니어는 다양한 운영 체제를 다룰 수 있어야 하며, 특히 리눅스에 대한 이해가 필수적이다. 리눅스 명령어, 쉘 스크립트 작성, 시스템 모니터링 및 관리 도구 사용법을 익혀야 한다.</p>\n<h3 id=\"버전-관리-시스템\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C\" aria-label=\"버전 관리 시스템 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버전 관리 시스템</h3>\n<p>Git과 같은 버전 관리 시스템(VCS)을 사용하는 방법을 배워야 한다. Git을 사용하면 코드 변경 내역을 추적하고, 협업할 때 코드 충돌을 관리할 수 있다. GitHub, GitLab 등의 플랫폼을 활용해 프로젝트를 관리하는 방법도 익혀야 한다.</p>\n<h3 id=\"cicd-파이프라인\" style=\"position:relative;\"><a href=\"#cicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8\" aria-label=\"cicd 파이프라인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CD 파이프라인</h3>\n<p>지속적 통합/지속적 배포(CI/CD) 파이프라인을 구축하는 방법을 배우는 것이 중요하다. Jenkins, Travis CI, CircleCI 등과 같은 도구를 사용해 자동화된 빌드, 테스트, 배포 파이프라인을 설정하고 관리하는 방법을 익혀야 한다.</p>\n<h3 id=\"클라우드-컴퓨팅\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%BB%B4%ED%93%A8%ED%8C%85\" aria-label=\"클라우드 컴퓨팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클라우드 컴퓨팅</h3>\n<p>AWS, Azure, GCP와 같은 클라우드 플랫폼에 대한 이해가 필요하다. 클라우드 서비스를 활용해 인프라를 구성하고 관리하는 방법을 익혀야 한다. 특히, Infrastructure as Code(IaC) 개념을 이해하고 Terraform, CloudFormation 등의 도구를 사용하는 것이 중요하다.</p>\n<h3 id=\"컨테이너와-오케스트레이션\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%85%98\" aria-label=\"컨테이너와 오케스트레이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너와 오케스트레이션</h3>\n<p>Docker를 사용해 애플리케이션을 컨테이너화하는 방법을 배우고, Kubernetes를 사용해 컨테이너화된 애플리케이션을 오케스트레이션하는 방법을 익혀야 한다. 이러한 기술은 애플리케이션의 이식성과 확장성을 높이는 데 필수적이다.</p>\n<h3 id=\"모니터링-및-로깅\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%B0%8F-%EB%A1%9C%EA%B9%85\" aria-label=\"모니터링 및 로깅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모니터링 및 로깅</h3>\n<p>시스템과 애플리케이션의 상태를 모니터링하고 로그를 분석하는 방법을 배워야 한다. Prometheus, Grafana, ELK 스택(Elasticsearch, Logstash, Kibana) 등의 도구를 사용해 모니터링 및 로깅 환경을 구축하는 방법을 익혀야 한다.</p>\n<h3 id=\"스크립트-및-프로그래밍-언어\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4\" aria-label=\"스크립트 및 프로그래밍 언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스크립트 및 프로그래밍 언어</h3>\n<p>Python, Bash, Ruby 등의 스크립트 언어를 배우는 것이 좋다. 자동화 스크립트를 작성하거나, DevOps 도구를 확장 및 커스터마이징하는 데 유용하다.</p>\n<h3 id=\"네트워크-기본-지식\" style=\"position:relative;\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-%EC%A7%80%EC%8B%9D\" aria-label=\"네트워크 기본 지식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네트워크 기본 지식</h3>\n<p>네트워크의 기본 개념, 프로토콜, 방화벽 설정 등을 이해해야 한다. 이는 애플리케이션의 배포와 운영 과정에서 네트워크 문제를 해결하는 데 도움이 된다.</p>\n<h2 id=\"내가-우선적으로-잘-알고-싶은-일은\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EA%B0%80-%EC%9A%B0%EC%84%A0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%98-%EC%95%8C%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EC%9D%BC%EC%9D%80\" aria-label=\"내가 우선적으로 잘 알고 싶은 일은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내가 우선적으로 잘 알고 싶은 일은?</h2>\n<ul>\n<li>가장 많이 접하게 될 개발환경에 익숙해지기</li>\n<li>문서화 / 자동화를 위한 솔루션 구축</li>\n<li>에자일 및 스크럼 방식으로 일하는법</li>\n<li>닷넷 기반 작업물을 Azure 클라우드로 서비스 하는법</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4\">데브옵스 기본 개념 이해</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8D%B0%EB%B8%8C%EC%98%B5%EC%8A%A4-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EC%9D%98-%EC%97%AD%ED%95%A0%EA%B3%BC-%EC%B1%85%EC%9E%84\">데브옵스 엔지니어의 역할과 책임</a></p>\n<ul>\n<li><a href=\"#1-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9-%EB%B0%8F-%EC%A7%80%EC%86%8D%EC%A0%81-%EB%B0%B0%ED%8F%ACcicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B5%AC%EC%B6%95-%EB%B0%8F-%EA%B4%80%EB%A6%AC\">1. 지속적 통합 및 지속적 배포(CI/CD) 파이프라인 구축 및 관리</a></li>\n<li><a href=\"#2-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\">2. 인프라 관리 및 모니터링</a></li>\n<li><a href=\"#3-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%ED%99%94-%EB%B0%8F-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%85%98\">3. 컨테이너화 및 오케스트레이션</a></li>\n<li><a href=\"#4-%EC%9E%90%EB%8F%99%ED%99%94-%EB%B0%8F-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85\">4. 자동화 및 스크립팅</a></li>\n<li><a href=\"#5-%ED%98%91%EC%97%85-%EB%B0%8F-%EC%BB%A4%EB%AE%A4%EB%8B%88%EC%BC%80%EC%9D%B4%EC%85%98\">5. 협업 및 커뮤니케이션</a></li>\n<li><a href=\"#6-%EB%B3%B4%EC%95%88-%EA%B0%95%ED%99%94\">6. 보안 강화</a></li>\n<li><a href=\"#7-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EB%B0%8F-%EC%B5%9C%EC%A0%81%ED%99%94\">7. 문제 해결 및 최적화</a></li>\n<li><a href=\"#8-%EB%AC%B8%EC%84%9C%ED%99%94\">8. 문서화</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%8F%84%EC%9B%80-%EB%90%98%EB%8A%94-%EA%B3%B5%EB%B6%80%EB%93%A4%EC%9D%80\">도움 되는 공부들은?</a></p>\n<ul>\n<li><a href=\"#%EB%A6%AC%EB%88%85%EC%8A%A4-%EB%B0%8F-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B4%80%EB%A6%AC\">리눅스 및 시스템 관리</a></li>\n<li><a href=\"#%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C\">버전 관리 시스템</a></li>\n<li><a href=\"#cicd-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8\">CI/CD 파이프라인</a></li>\n<li><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%BB%B4%ED%93%A8%ED%8C%85\">클라우드 컴퓨팅</a></li>\n<li><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%85%98\">컨테이너와 오케스트레이션</a></li>\n<li><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%B0%8F-%EB%A1%9C%EA%B9%85\">모니터링 및 로깅</a></li>\n<li><a href=\"#%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%B0%8F-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%96%B8%EC%96%B4\">스크립트 및 프로그래밍 언어</a></li>\n<li><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EA%B8%B0%EB%B3%B8-%EC%A7%80%EC%8B%9D\">네트워크 기본 지식</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%82%B4%EA%B0%80-%EC%9A%B0%EC%84%A0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%9E%98-%EC%95%8C%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EC%9D%BC%EC%9D%80\">내가 우선적으로 잘 알고 싶은 일은?</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"June 04, 2024","title":"데브옵스는 무슨 일을 하는가?","categories":"Cloud","author":"심우진","emoji":"🚀"},"fields":{"slug":"/Devops_01/"}},"site":{"siteMetadata":{"siteUrl":"https://woogooree.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/csharp_01/","nextSlug":"/c_02/","prevSlug":"/Devops_01/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}