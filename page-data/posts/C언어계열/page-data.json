{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/C언어계열","result":{"pageContext":{"currentCategory":"C언어계열","categories":["All","C언어계열","컴퓨터이론","WPF","LINUX","CLOUD","개발환경","프로젝트"],"edges":[{"node":{"id":"df5637a2-a202-52ca-9bc1-3a2d77f84ad9","excerpt":"C 언어 파일 입출력 개요 C 언어에서 파일 입출력은 데이터를 파일에 저장하고, 파일에서 데이터를 읽어오는 작업을 의미한다. 이를 통해 프로그램은 영속적인 데이터를 다룰 수 있다. C 언어는 표준 라이브러리를 통해 파일 입출력을 지원한다. 파일 열기와 닫기 파일 열기 ()  함수는 파일을 열고, 파일에 대한 포인터를 반환한다. 파일을 열 때는 모드를 지정해야 한다. 주요 모드는 다음과 같다: : 읽기 모드 (파일이 존재해야 함) : 쓰기 모드 (파일이 없으면 생성, 있으면 덮어씀) : 추가 모드 (파일이 없으면 생성, 있으면 끝에 추가) : 읽기 및 쓰기 모드 (파일이 존재해야 함) : 읽기 및 쓰기 모드 (파일이 없으면 생성, 있으면 덮어씀) : 읽기 및 추가 모드 (파일이 없으면 생성, 있으면 끝에 추가) 파일 닫기 ()  함수는 열린 파일을 닫는다. 파일을 닫지 않으면 데이터 손실이나 메모리 누수가 발생할 수 있다. 파일 쓰기 문자 단위 쓰기 ()  함수는 파일에 문자를 쓴다…","fields":{"slug":"/c_03/"},"frontmatter":{"categories":"C언어계열","title":"C 언어 파일 입출력","date":"June 18, 2024"}},"next":{"fields":{"slug":"/study_02/"}},"previous":null},{"node":{"id":"ac0a7476-c315-5107-aba8-b402a5dba9a9","excerpt":"배열 인덱싱 ‘^연산자’ 8.0 버전부터 사용할 수 있게 된 ^ 연산자를 이용해서 뒤에서부터 접근할 수 있다 Linq를 이용하여 배열 자르기 Skip 과 Take 를 통해 가져오는 방식을 사용하면 배열의 Range 를 넘어선 요소를 선택하게 되더라도\n오류가 발생하지 않는 구조적 차이가 있다 배열 인덱싱 ‘^연산자’ Linq를 이용하여 배열 자르기","fields":{"slug":"/csharp_02/"},"frontmatter":{"categories":"C언어계열","title":"C# 배열 인덱싱","date":"June 04, 2024"}},"next":{"fields":{"slug":"/csharp_01/"}},"previous":{"fields":{"slug":"/cloud_01/"}}},{"node":{"id":"cc381e79-cf58-5d2b-960f-c8c27c3e4998","excerpt":"형변환 박싱과 언박싱 as operator (참조 형식을 다른 참조형식으로 변환, 실패시 null 반환) Convert (데이터 타입 변환) 배열 형변환 데이터 타입 int == System.Int32\nstring == System.String\nbool == System.Boolean object : C# 모든 데이터 타입의 최상위 기본 클래스, 박싱/언박싱 가능 리터럴 소스 코드에서 값을 나타내는 고정된 값\n컴파일 시간에 값을 결정함\n실행 시간에 변경 되지 않음 스택 메모리 스택 메모리는 함수 호출과 관련된 변수, 지역 볓수 및 매게변수를 저장하는 데 사용됨 (후입선출 방식으로 관리됨, 메모리 할당과 해제가 자동이며 매우 빠름) 힙 메모리 프로그램 실행 도중 동적으로 할당되고 해제되는 변수와 데이터를 저장하는 데 사용됨 (메모리 할당과 해제를 명시적으로 프로그래머가 수행해야하지만 C#에서는 GC가 자동으로 처리함) 클래스, 인터페이스, 배열, 대리자, 객체, 문자열 등이 C# 참…","fields":{"slug":"/csharp_01/"},"frontmatter":{"categories":"C언어계열","title":"C# 데이터타입과 형변환","date":"June 03, 2024"}},"next":{"fields":{"slug":"/tool_02/"}},"previous":{"fields":{"slug":"/csharp_02/"}}},{"node":{"id":"a2bb6b59-dc19-5009-8019-393e39c2a63b","excerpt":"들어가기 전에 힙과 스택부터 알기 힙(Heap)과 스택(Stack)은 프로그램 실행 중에 메모리를 관리하는 두 가지 주요 영역이다.\r\n이 두 영역은 메모리 할당과 해제, 사용 방식에서 차이가 있다. 스택 메모리 특징 고정 크기: 스택 메모리는 일반적으로 프로그램이 시작될 때 고정된 크기로 할당된다. 빠른 할당 및 해제: 메모리 할당과 해제는 매우 빠르게 이루어진다. 함수 호출 시 스택 프레임이 생성되고 함수가 종료되면 자동으로 해제된다. LIFO 구조: 스택은 Last In, First Out(LIFO) 구조를 따른다. 가장 최근에 할당된 메모리가 가장 먼저 해제된다. 용도 지역 변수: 함수 내에서 선언된 변수는 스택에 저장된다. 함수 호출 정보: 함수 호출 시 전달된 인수, 복귀 주소, 그리고 함수 실행을 위한 로컬 변수가 스택에 저장된다. 예제 이 예제에서 는 함수 의 스택에 저장된다. 가 호출될 때 스택 프레임이 생성되고, 가 종료될 때 스택 프레임이 해제된다. 힙 메모리 특…","fields":{"slug":"/c_02/"},"frontmatter":{"categories":"C언어계열","title":"C언어 동적 메모리 관리와 함수 포인터","date":"June 02, 2024"}},"next":{"fields":{"slug":"/study_01/"}},"previous":{"fields":{"slug":"/tool_02/"}}},{"node":{"id":"45398970-e40f-5de2-9a63-30e8dff32047","excerpt":"포인터란? 포인터(pointer)는 메모리 주소를 저장하는 변수이다. *변수명 으로 선언한다. 사용할때 *변수명을 사용하면 메모리 주소값이 아닌 메모리 주소가 가리키고 있는 변수의 값이 출력된다. 사용할때 포인터 변수명을 * 없이 사용하면 변수 값이 아닌 메모리 주소 그자체를 출력한다. 포인터의 기본 사용법 1. 포인터 선언과 초기화 위 예제에서 는 정수형 포인터 p를 선언한다는 의미이다.\r\n는 변수 a의 주소를 p에 저장하는 것을 의미한다.\r\n는 p가 가리키는 주소에 저장된 값을 의미한다. 2. 배열과 포인터 위 예제에서 는 배열 의 첫 번째 요소의 주소를 p에 저장하는 것을 의미한다.\r\n는 포인터 연산을 통해 배열의 각 요소에 접근하는 방법을 보여준다. 3. 포인터를 이용한 함수 인수 전달 위 예제에서는 포인터를 사용하여 함수 인수로 변수의 주소를 전달한다.\r\n변수의 주소를 전달하지만 *변수명으로 사용했기 때문에 주소를 전달하면서 안에있는 값을 읽는다.\r\n이를 통해 함수 내에서…","fields":{"slug":"/c_01/"},"frontmatter":{"categories":"C언어계열","title":"C언어 포인터 개념정리","date":"June 01, 2024"}},"next":{"fields":{"slug":"/certificate_08/"}},"previous":{"fields":{"slug":"/tool_01/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}