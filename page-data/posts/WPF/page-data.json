{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/WPF","result":{"pageContext":{"currentCategory":"WPF","categories":["All","개발상식","WPF","LINUX","정보처리기사","기자단활동"],"edges":[{"node":{"id":"768aaa0d-5e3f-5294-b0ff-d4704c8d7ceb","excerpt":"시작은 MainWindow MainWindow.xaml 그리드에 Frame 태그의 Source에 MenuPage링크를 직접 넣어주면 MenuPage의 화면이 띄워짐 MenuPage.xaml (그리드부분) 화면을 Row를 이용해 2분할하고 Hello 버튼과 World 버튼을 넣고 각각의 클릭 이벤트를 만듬 넓이와  넓이를 직접 지정해주면 자식 요소는 부모 요소의 크기 만큼 당겨주는 특징 때문에 가운데 정렬됨 MenuPage.cs 각 버튼의 클릭이벤트에서 URI를 생성하고 Navigate 를 이용해 각 페이지로 이동하도록 구현함 page1.xaml 과 page2.xaml은 Grid 안에 TextBlock을 만들어서 Hello 와 World 를 찍었음 결과  각 버튼을 누르면 가운데에 Hello 와 World 가 출력됨\r\nWPF는 뒤로가기를 구현하지 않아도 자동으로 생성됨 시작은 MainWindow MainWindow.xaml MenuPage.xaml (그리드부분) MenuPage.cs…","fields":{"slug":"/wpf_04/"},"frontmatter":{"categories":"WPF","title":"WPF 화면이동 구현 - Page 사용","date":"June 15, 2024"}},"next":{"fields":{"slug":"/wpf_01/"}},"previous":{"fields":{"slug":"/coding_05/"}}},{"node":{"id":"e02bdb47-3dbb-59ff-b662-0a2e7a86cd01","excerpt":"WPF 프로젝트의 디렉토리 구조 솔루션 파일 (.sln) 솔루션 파일(.sln)은 Visual Studio 솔루션의 구성 요소를 정의하는 파일로 디렉토리 최상위에 있다. 이 파일은 하나 이상의 프로젝트를 포함할 수 있으며, 개발자가 프로젝트를 열고 빌드하는 데 중요한 역할을 한다. 프로젝트 파일 (.csproj) 프로젝트 파일(.csproj)은 C# 프로젝트의 설정을 정의하는 파일이다. 이 파일에는 프로젝트의 빌드 구성, 참조하는 라이브러리, 컴파일할 소스 파일 목록 등이 포함된다. 프로젝트 파일은 프로젝트의 빌드와 배포를 관리하며, 다양한 설정을 통해 프로젝트의 동작을 정의할 수 있다. Properties: 프로젝트의 속성을 포함하며, 주로  파일이 위치한다. 이 파일은 어셈블리의 메타데이터를 정의하며, 빌드와 배포 시 중요한 역할을 한다. References: 프로젝트에서 참조하는 외부 라이브러리나 어셈블리들. 프로젝트가 의존하는 외부 코드나 프레임워크를 관리한다. App.xa…","fields":{"slug":"/wpf_01/"},"frontmatter":{"categories":"WPF","title":"WPF의 디렉토리 구조 및 MVVM 패턴","date":"June 15, 2024"}},"next":{"fields":{"slug":"/jetson_01/"}},"previous":{"fields":{"slug":"/wpf_04/"}}},{"node":{"id":"84cb5fad-5c45-5fcd-99a2-509930ecfcd0","excerpt":"배열 인덱싱 ‘^연산자’ 8.0 버전부터 사용할 수 있게 된 ^ 연산자를 이용해서 뒤에서부터 접근할 수 있다 Linq를 이용하여 배열 자르기 Skip 과 Take 를 통해 가져오는 방식을 사용하면 배열의 Range 를 넘어선 요소를 선택하게 되더라도\n오류가 발생하지 않는 구조적 차이가 있다 배열 인덱싱 ‘^연산자’ Linq를 이용하여 배열 자르기","fields":{"slug":"/coding_02/"},"frontmatter":{"categories":"WPF","title":"C# 배열 인덱싱","date":"June 08, 2024"}},"next":{"fields":{"slug":"/coding_01/"}},"previous":{"fields":{"slug":"/coding_03/"}}},{"node":{"id":"82c59938-2f5b-50da-99f6-70ca715ecf6c","excerpt":"형변환 박싱과 언박싱 as operator (참조 형식을 다른 참조형식으로 변환, 실패시 null 반환) Convert (데이터 타입 변환) 배열 형변환 데이터 타입 int == System.Int32\nstring == System.String\nbool == System.Boolean object : C# 모든 데이터 타입의 최상위 기본 클래스, 박싱/언박싱 가능 리터럴 소스 코드에서 값을 나타내는 고정된 값\n컴파일 시간에 값을 결정함\n실행 시간에 변경 되지 않음 스택 메모리 스택 메모리는 함수 호출과 관련된 변수, 지역 볓수 및 매게변수를 저장하는 데 사용됨 (후입선출 방식으로 관리됨, 메모리 할당과 해제가 자동이며 매우 빠름) 힙 메모리 프로그램 실행 도중 동적으로 할당되고 해제되는 변수와 데이터를 저장하는 데 사용됨 (메모리 할당과 해제를 명시적으로 프로그래머가 수행해야하지만 C#에서는 GC가 자동으로 처리함) 클래스, 인터페이스, 배열, 대리자, 객체, 문자열 등이 C# 참…","fields":{"slug":"/coding_01/"},"frontmatter":{"categories":"WPF","title":"C# 데이터타입과 형변환","date":"June 07, 2024"}},"next":{"fields":{"slug":"/certificate_08/"}},"previous":{"fields":{"slug":"/coding_02/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}