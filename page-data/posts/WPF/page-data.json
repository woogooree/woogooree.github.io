{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/WPF","result":{"pageContext":{"currentCategory":"WPF","categories":["All","컴퓨터이론","WPF","LINUX","CLOUD","C언어계열","개발환경","정보처리기사","기자단활동","프로젝트"],"edges":[{"node":{"id":"768aaa0d-5e3f-5294-b0ff-d4704c8d7ceb","excerpt":"시작은 MainWindow MainWindow.xaml 그리드에 Frame 태그의 Source에 MenuPage링크를 직접 넣어주면 MenuPage의 화면이 띄워짐 MenuPage.xaml (그리드부분) 화면을 Row를 이용해 2분할하고 Hello 버튼과 World 버튼을 넣고 각각의 클릭 이벤트를 만듬 넓이와  넓이를 직접 지정해주면 자식 요소는 부모 요소의 크기 만큼 당겨주는 특징 때문에 가운데 정렬됨 MenuPage.cs 각 버튼의 클릭이벤트에서 URI를 생성하고 Navigate 를 이용해 각 페이지로 이동하도록 구현함 page1.xaml 과 page2.xaml은 Grid 안에 TextBlock을 만들어서 Hello 와 World 를 찍었음 결과  각 버튼을 누르면 가운데에 Hello 와 World 가 출력됨\r\nWPF는 뒤로가기를 구현하지 않아도 자동으로 생성됨 시작은 MainWindow MainWindow.xaml MenuPage.xaml (그리드부분) MenuPage.cs…","fields":{"slug":"/wpf_04/"},"frontmatter":{"categories":"WPF","title":"WPF 화면이동 구현 - Page 사용","date":"June 10, 2024"}},"next":{"fields":{"slug":"/wpf_03/"}},"previous":{"fields":{"slug":"/study_02/"}}},{"node":{"id":"dcadef89-05f4-5938-94e7-9ce6976f43a0","excerpt":"데이터바인딩 데이터바인딩(Data Binding)은 사용자 인터페이스(UI) 요소와 데이터 소스 간의 연결을 설정하여, 데이터가 자동으로 동기화되도록 하는 기술이다. 이를 통해 데이터 소스의 변경이 UI에 즉시 반영되며, UI를 통해 변경된 데이터가 데이터 소스에도 즉시 반영된다. 주로 WPF에서 데이터바인딩을 활용하게 된다. 데이터바인딩의 주요 구성 요소 데이터 소스(Data Source): 바인딩할 실제 데이터이다. 이는 객체, 컬렉션, 데이터베이스 등일 수 있다. 바인딩 타겟(Binding Target): 데이터를 표시할 UI 요소이다. 예를 들어 텍스트 박스, 레이블 등이 있다. 바인딩 객체(Binding Object): 데이터 소스와 바인딩 타겟 간의 연결을 설정하는 객체이다. 데이터바인딩의 활용 일반적으로 소스는 데이터(ViewModel)이고 타겟은 컨트롤이다. 모든 바인딩에는 소스 객체, 소스 속성, 타겟 객체 및 타겟 속성이 있다. 소스 객체는 Binding Sour…","fields":{"slug":"/wpf_03/"},"frontmatter":{"categories":"WPF","title":"WPF에서 데이터바인딩 하는법","date":"June 09, 2024"}},"next":{"fields":{"slug":"/wpf_01/"}},"previous":{"fields":{"slug":"/wpf_04/"}}},{"node":{"id":"e02bdb47-3dbb-59ff-b662-0a2e7a86cd01","excerpt":"WPF 프로젝트의 디렉토리 구조 솔루션 파일 (.sln) 솔루션 파일(.sln)은 Visual Studio 솔루션의 구성 요소를 정의하는 파일로 디렉토리 최상위에 있다. 이 파일은 하나 이상의 프로젝트를 포함할 수 있으며, 개발자가 프로젝트를 열고 빌드하는 데 중요한 역할을 한다. 프로젝트 파일 (.csproj) 프로젝트 파일(.csproj)은 C# 프로젝트의 설정을 정의하는 파일이다. 이 파일에는 프로젝트의 빌드 구성, 참조하는 라이브러리, 컴파일할 소스 파일 목록 등이 포함된다. 프로젝트 파일은 프로젝트의 빌드와 배포를 관리하며, 다양한 설정을 통해 프로젝트의 동작을 정의할 수 있다. Properties: 프로젝트의 속성을 포함하며, 주로  파일이 위치한다. 이 파일은 어셈블리의 메타데이터를 정의하며, 빌드와 배포 시 중요한 역할을 한다. References: 프로젝트에서 참조하는 외부 라이브러리나 어셈블리들. 프로젝트가 의존하는 외부 코드나 프레임워크를 관리한다. App.xa…","fields":{"slug":"/wpf_01/"},"frontmatter":{"categories":"WPF","title":"WPF의 디렉토리 구조 및 MVVM 패턴","date":"June 07, 2024"}},"next":{"fields":{"slug":"/jetson_01/"}},"previous":{"fields":{"slug":"/wpf_03/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}