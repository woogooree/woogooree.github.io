{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"fcc7982d-385b-53b5-b79f-21a9bc97b2fb","excerpt":"UI 설계 원칙 직관성(Intuitiveness) : 누구나 쉽게 이해, 쉽게 사용해야함 유효성(Efficiency) : 정확하게 사용자의 목표를 달성 하도록 함 학습성(Learnability) : 모두가 쉽게 배우고 사용할 수 있게 해야함 유연성(Flexibility) : 사용자의 요구사항을 최대한 수용하고, 실수를 방지해야함 UI 품질 요구사항 (하위항목은 이해위주로) 기능성(Functionality) : 정확하지 않은 결과가 발생할 확률과 시스템의 동작 관찰 적절성, 정밀성, 상호 운용성, 보안성, 호환성 신뢰성(Realiability): 작동되는 시간동안 의도하는 기능을 수행함을 보증 성숙성, 고장 허용성, 회복성 사용성(Usablity) : 어떠한 행위를 정확하고 쉽게 인지해서 쓰기 쉬운가 이해성, 학습성, 운용성 효율성(Efficiency) : 할당된 시간에 한정된 자원으로 얼마나 빨리/많이 처리 시간 효율성, 자원 효율성 유지보수성(Maintainability) : 요…","fields":{"slug":"/ceritificate_03/"},"frontmatter":{"categories":"STUDY","title":"2024 정보처리기사 실기 요약 - (3) UI구현 ~ 통합구현","date":"May 26, 2024"}},"next":{"fields":{"slug":"/ceritificate_02/"}},"previous":null},{"node":{"id":"f25bd8e1-4701-584e-b85d-f5c2ca77a885","excerpt":"운영체제 컴퓨터 사용자와 컴퓨터 하드웨어 간의 인터페이스 담당 -Windows : 중/소규모 서버, 일반 PC, 세계최대 점유율 UNIX : 벨연구소에서 개발, 대용량 처리, 엔터프라이즈 급 서버 Linux : 중/대규모 서버 대상, 높은 보안성, 비용 가장 적음 Android : 리눅스 위에서 구동, 자바와 코틀린으로 작성 IOS : 높은 보안성, 고성능 운영체제 현행 시스템 분석 고려사항 신뢰도, 성능, 기술 지원, 주변 기기 , 구축 비용 미들웨어 응용 프로그램과 환경 간에 원만한 통신이 이루어질 수 있도록 제어해주는 SW WAS 서버계층에서 애플리케이션이 동작할 수 있는 환경 제공, 트랜잭션 처리, 이기종 시스템 연동 DBMS 데이터 관리의 복잡성을 해결하는 동시에 데이터 추가, 변경, 검색, 삭제 및 백업, 복구 보안 등의 기능을 지원하는 SW 스키마 외부, 개념, 내부 스키마로 나눌 수 있으며 데이터의 구조와 제약조건을 명세한 것 DB 설계 순서 요구사항 분석 > 개념적…","fields":{"slug":"/ceritificate_02/"},"frontmatter":{"categories":"STUDY","title":"2024 정보처리기사 실기 요약 - (2) 데이터입출력","date":"May 25, 2024"}},"next":{"fields":{"slug":"/ceritificate_01/"}},"previous":{"fields":{"slug":"/ceritificate_03/"}}},{"node":{"id":"d1d15723-9c58-5ab2-93e2-0a7e9310f4fe","excerpt":"애자일 XP : 의사소통 개선과 즉각적 피드백 5가지 가치 : 용기, 단순성, 의사소통, 존중, 피드백 의사(소통)선생님 피(드백)존(중) 용기에 담(순성)아주세요 by 홍달쌤 12가지 기본 원리 짝 프로그래밍(Pair Programming) : 개발자 둘이서 같이하면 혼자와 같거나 적은 비용이 듬 공동 코드 소유(Collective Ownership) : 공동 소유로 변경시 지연감소 효과 지속적인 통합(Continuous Integration) : 매일 여러 번씩 통합, 빌드 해야함 계획 세우기(Planning Process) : 개발자가 필요한 것은 무엇이며 어떤 부분에서 지연될 수 있는지를 알려줘야함 작은 릴리즈(Small Release) : 작은 시스템 먼저 만들고 짧은 단위로 업데이트 메타포어(Metathor) : 공통적인 이름 체계와 시스템 서술서를 통해 고객과 개발자간의 의사소통을 원활하게 간단한 디자인(Simple Design): 요구사항에 적합한 가장 단순한 시스템…","fields":{"slug":"/ceritificate_01/"},"frontmatter":{"categories":"STUDY","title":"2024 정보처리기사 실기 요약 - (1) 요구사항 ~ 데이터입출력","date":"May 24, 2024"}},"next":{"fields":{"slug":"/certificate_main/"}},"previous":{"fields":{"slug":"/ceritificate_02/"}}},{"node":{"id":"73ff04d3-71e3-5bd1-97ea-6c1d0da702b6","excerpt":"개요 2024년도 1회차에 정보처리기사를 준비했었습니다. 개정 후 난이도가 어려워진 대신 개발자가 알아야할 컴퓨터 사이언스 관련 지식을 체계적으로 학습할 수 있도록 잘 짜여진 시험이라 자격증 이외에도 비전공자로써 관련 지식을 쌓는데 큰 도움이 되었습니다. 난이도 체감 필기시험 필기 시험은 5과목으로 구성되어 범위가 넓고 외울 지식이 아주 많아 보이지만 실제 시험은 객관식 4지선다 형식인데다가 기존 기출문제를 풀어본 문제가 그대로 출제되는게 10~20% 정도를 차지합니다. 햇갈리게 함정을 파놓기 보다는 어렴풋이 본 기억만 나도 정답을 고르기 쉬워서 진짜 공부를 안한게 아니라면 1주일 정도만 공부해도 쉽게 합격할 수 있는 난이도 였습니다. 유튜브에 올라온 1시간 정도 분량의 필기 과목별 강의 영상을 1회독 하고 개정 이후 CBT 이전의 기출 문제만 다 풀어보고 오답인 부분을 체크하는 정도로 공부했을 때 평균 85~90점 정도의 점수를 받을 수 있었습니다. 실기시험 실기시험은 합격률이 …","fields":{"slug":"/certificate_main/"},"frontmatter":{"categories":"STUDY","title":"2024 정보처리기사 후기 및 요약정리","date":"May 23, 2024"}},"next":{"fields":{"slug":"/journal_01/"}},"previous":{"fields":{"slug":"/ceritificate_01/"}}},{"node":{"id":"da88b6f8-c393-5195-9495-af054a6cf8e6","excerpt":"고민하게 된 계기 대학교 막바지 무렵, 학교를 다니면서 비교과 과목이나 취업지원제도의 국비지원 교육을 통해 코딩을 배우기 시작했다. 무료로 수강할 수 있는 국비교육들은 깔짝 맛만보는 수준이었기에 매우 기초적인 개념을 배우는 정도와 클론코딩 정도의 수업을 들은 정도여서 프로그램이 어떤 구조로 동작하는지 이해할수도 없었고 실무에 많이 사용되는 프레임워크들의 사용법을 익힐 수도 없었다. 국비지원 수업들을 통해 느낀 점은 100% 무료로 들을 수 있는 단기 과정들은 깊이가 부족해서 전혀 취업에 도달할 정도의 실력을 쌓을 수 없는 정부의 눈먼돈 타먹기 같다는 것이었다. 결국 취업시장에 뛰어들 수 있을 정도의 실력을 만들기 위해선 정부가 비용의 일부분을 지원해주지만 수백만원의 자기부담금이 필요한 코딩 학원 혹은 유료부트캠프 에서 1년 이상의 시간동안 공부해야 한다고 생각했다.   취업 후 상환 방식으로 다닐 수 있는 부트캠프도 있었지만 유명 부트캠프들은 서울에서 자취를 해야만 다닐 수 있는 …","fields":{"slug":"/journal_01/"},"frontmatter":{"categories":"JOURNAL","title":"(폴리텍학생기자단) 개발자 취직 코딩학원 vs 폴리텍대학, 어느 쪽이 유리할까?","date":"May 22, 2024"}},"next":{"fields":{"slug":"/study_01/"}},"previous":{"fields":{"slug":"/certificate_main/"}}},{"node":{"id":"5b1fb813-ea01-5f2f-9413-aecf90932282","excerpt":"전역(global) 변수 라이프 타임이 프로그램이 종료될 때 까지이며, 다른 파일에서도 해당 변수에 접근이 가능하다. 정적(static) 변수 라이프 타임이 global 변수와 마찬가지로 프로그램이 종료될 때 까지이며, 반드시 static 키워드가 붙는다.\n해당 변수가 선언된 scope에 따라서 접근 가능한 범위가 결정되고, 다른 파일에서 접근할 수 없다. 차이점 메모리 할당에서 global 변수는 초기화 되지 않으면 .bss 영역, 초기화 된다면 .data 영역에 할당 된다.\n하지만 static 변수는 초기화 하지 않은 상태에서 메모리 자체가 잡히지 않는다. 전역 변수와 정적 변수의 초기화 시점 static 변수와 static 객체를 지역적으로 선언하고 초기화 할 때, 변수는 .data 영역에 올라간다.\n객체의 경우 .bss영역에 올라간 후 dynamic initializer가 진행 되고, 생성자를 통한 초기화라면 해당 변수가 처음 수행되는 시점에 초기화가 이루어진다. 객체 초기…","fields":{"slug":"/study_01/"},"frontmatter":{"categories":"STUDY","title":"왜 전역변수가 아닌 static 키워드 변수를 사용하는가?","date":"May 21, 2024"}},"next":null,"previous":{"fields":{"slug":"/journal_01/"}}}],"categories":["All","STUDY","JOURNAL"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}