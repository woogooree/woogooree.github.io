{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/개발상식","result":{"pageContext":{"currentCategory":"개발상식","categories":["All","개발상식","WPF","LINUX","정보처리기사","기자단활동"],"edges":[{"node":{"id":"6f285654-1620-5bc8-9487-8c1c7b6482ab","excerpt":"소켓(Socket) 프로그램이 네트워크에서 데이터를 송수신할 수 있도록 네트워크 환경에 연결할 수 있게 만들어진 연결부를 의미한다. 통신을 위한 프로토콜에 맞게 만들어져야 한다. 클라이언트 소켓과 서버 소켓 데이터를 주고받기 위해서는 소켓의 연결 과정이 선행되어야 한다.\r\n연결을 만들기 위해서는 IP주소와 포트 번호로 식별되는 대상에게 연결을 요청하고 반대편이 연결요청(보낸이의 IP주소와 포트번호로 식별)을 미리 시스템에 등록하고 처리할 준비가 되어 있어야 한다. 연결요청을 보내는 쪽이 클라이언트 소켓 연결요청을 받으려고 대기하는 쪽이 서버 소켓 클라이언트 소켓과 서버 소켓은 역할과 구현 절차 구분을 위해 다르게 부르는 것일 뿐 내부 구조가 다르지 않다. 소켓 연결이 완료된 후, 클라이언트 소켓과 서버 소켓이 직접 데이터를 주고 받는다고 생각하기 쉽지만 사실 서버 소켓은 클라이언트 소켓의 연결 요청을 받아들이는 역할만 수행할 뿐이다. 직접적인 데이터 송수신은 서버 소켓의 연결 요청…","fields":{"slug":"/coding_05/"},"frontmatter":{"categories":"개발상식","title":"TCP/IP 소켓 프로그래밍","date":"June 16, 2024"}},"next":{"fields":{"slug":"/wpf_04/"}},"previous":null},{"node":{"id":"7eed7d41-ae87-5134-bc81-a70f88d907e1","excerpt":"필드 변수 언더바 자동 생성 생성자 매개변수에서 Control + . 을 누르면 필드 변수를 자동으로 생성할 수 있음 이때 선언된 필드 변수를 선택하고 Control + R + R 를 눌러\n언더바를 붙인 변수명을 사용하게 되는데 이를 자동화 하는 방법이 있음 도구 -> 옵션 -> 텍스트편집기 -> C# -> 코드스타일 -> 명명 명명스타일 관리 -> +클릭 -> 스타일 제목 작성 필수 접두사 칸에 _ 입력 대문자 표시 칸에서 카멜 대/소문자 이름 선택 -> 확인 -> 확인 사양 관리 -> + 클릭 -> 제목입력 (ex : 필드변수_자동생성) 좌측의 모두 선택취소 버튼 클릭 -> 모두 꺼진 상태에서 필드만 체크 우측상단의 모두선택취소 버튼 클릭 -> 마찬가지로 private 만 체크 -> 확인 -> 확인 하단의 + 버튼 클릭 -> 사양에서 Pravate Fields -> 필수스타일에서 만든제목 선택 심각도는 리펙터링만을 선택을 체크 -> 확인 까지 작업하면 필드변수를 생성할 때 언더…","fields":{"slug":"/coding_04/"},"frontmatter":{"categories":"개발상식","title":"Visual Studio 필드변수 언더바 자동생성","date":"June 10, 2024"}},"next":{"fields":{"slug":"/coding_03/"}},"previous":{"fields":{"slug":"/jetson_01/"}}},{"node":{"id":"a8e71f50-f797-5ac7-b82c-8dc3190c76b8","excerpt":"Control + K + E 코드 정리 기능\n설정 : 분석 - 코드정리 - 코드정리구성 에서 커스터마이징 가능 불필요한 Using 제거 / 정렬 사용하지 않는 변수 제거 불필요한 캐스트 제거 암시적/명시적 형식 기본 설정 적용 자동 적용 시키는법\nControl + Q -> Cleanup -> 프로필 저장 시 코드정리 선택 -> 런코드.. 선택 Control + \\ + T 작업목록 기능\n주석을 이용해서 토큰 : 설명 식으로 작성한 작업목록 리스트를 작성하고 관리할 수 있음 목록화 해서 커멘드를 누르면 작업 목록 리스트를 호출함 토큰 추가하는법\n도구 - 옵션 - 환경 및 작업 목록 : 토큰 목록 (추가) 상하화면분할 원하는 탭의 스크롤바 상단 드래그 버튼을 잡고 내리면 분할됨\n(분할된 화면의 상단바를 도로 끌어올리면 원상복귀) 관련코드 윈도우창 호출 특정 코드의 정의를 보고 싶으면 F12 를 누르면 그 코드가 선언된 스페이스로 넘어감\nALT+F12 를 누르면 작은 크기로 스페이스가 호…","fields":{"slug":"/coding_03/"},"frontmatter":{"categories":"개발상식","title":"Visual Studio 유용한 단축키","date":"June 09, 2024"}},"next":{"fields":{"slug":"/coding_02/"}},"previous":{"fields":{"slug":"/coding_04/"}}},{"node":{"id":"2836f04d-7206-5aa9-a8ff-ba08aa20ee15","excerpt":"전역(global) 변수 라이프 타임이 프로그램이 종료될 때 까지이며, 다른 파일에서도 해당 변수에 접근이 가능하다. 정적(static) 변수 라이프 타임이 global 변수와 마찬가지로 프로그램이 종료될 때 까지이며, 반드시 static 키워드가 붙는다.\n해당 변수가 선언된 scope에 따라서 접근 가능한 범위가 결정되고, 다른 파일에서 접근할 수 없다. 차이점 메모리 할당에서 global 변수는 초기화 되지 않으면 .bss 영역, 초기화 된다면 .data 영역에 할당 된다.\n하지만 static 변수는 초기화 하지 않은 상태에서 메모리 자체가 잡히지 않는다. 전역 변수와 정적 변수의 초기화 시점 static 변수와 static 객체를 지역적으로 선언하고 초기화 할 때, 변수는 .data 영역에 올라간다.\n객체의 경우 .bss영역에 올라간 후 dynamic initializer가 진행 되고, 생성자를 통한 초기화라면 해당 변수가 처음 수행되는 시점에 초기화가 이루어진다. 객체 초기…","fields":{"slug":"/study_01/"},"frontmatter":{"categories":"개발상식","title":"왜 전역변수가 아닌 static 키워드 변수를 사용하는가?","date":"May 21, 2024"}},"next":null,"previous":{"fields":{"slug":"/journal_01/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}