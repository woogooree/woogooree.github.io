{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/네트워크","result":{"pageContext":{"currentCategory":"네트워크","categories":["All","네트워크","Framework","프로젝트","SQL","기초공부","대외활동","Cloud"],"edges":[{"node":{"id":"29570e6f-153a-5651-807f-19526ebfd413","excerpt":"Modbus 시작하기 Modbus는 일반적으로 장치간 SCADA 식의 네트워크 통신에 사용됩니다. 예를 들어, 대형 서버는 PLC 또는 PAC의 마스터가 될 수 있고, PLC/PAC는 또한 센서, 밸브, 모터 또는 기타 임베디드 장치의 마스터가 될 수도 있다. 이러한 요구를 충족하기 위해 Modbus는 유연적인 데이터 및 함수 모델을 갖춘 요청-응답 프로토콜로서 제작되었다. 요청-응답 구조 Modbus는 마스터-슬레이브 구조를 사용한다. 마스터 디바이스는 통신을 시작하고 슬레이브 디바이스는 응답하는 형태로 동작한다. 한 번에 하나의 마스터만 존재할 수 있으며, 다수의 슬레이브가 존재할 수 있다. Modbus에서 요청은 여러 층으로 된 데이터의 세트이다. 첫 번째 계층은 Application Data Unit(ADU)로, 대부분의 사람들이 ADU를 Modbus의 유형이라고 생각하지만, ADU에는 ASCII, Remote Terminal Unit(RTU), TCP/IP의 세 가지가 있…","fields":{"slug":"/RS485_02/"},"frontmatter":{"categories":"네트워크","title":"RS-485 전력계의 Modbus RTU 프로토콜 통신","date":"July 01, 2024"}},"next":{"fields":{"slug":"/RS485_01/"}},"previous":null},{"node":{"id":"65b2b3aa-b2c3-5957-a731-52a31c8bb767","excerpt":"RS485 통신 결선 결선도 설명  이미지에 나와 있는 결선도를 보면 다음과 같은 결선이 필요하다: 1번 및 2번 핀: AC 300V 전원 공급 3번 및 4번 핀: AC 5A 전원 공급 5번 핀: A+ (RS485 통신선) 6번 핀: B- (RS485 통신선) 7번 핀: SG (Signal Ground) 8번 및 9번 핀: AC 90~260V / DC 110V 전원 공급 결선 방법 전원 결선: 1번과 2번 핀에 AC 300V 전원을 연결 3번과 4번 핀에 AC 5A 전원을 연결 8번과 9번 핀에 AC 90~260V 또는 DC 110V 전원을 연결 RS485 통신선 결선: A+ (5번 핀)와 B- (6번 핀)을 각각 RS485 장치의 A+와 B-에 연결 SG (7번 핀)은 Signal Ground로 사용 TX와 RX의 개념 TX (Transmit): 송신, 데이터를 보내는 역할 RX (Receive): 수신, 데이터를 받는 역할 RS485는 차동 신호를 사용하여 데이터 전송을 하기 …","fields":{"slug":"/RS485_01/"},"frontmatter":{"categories":"네트워크","title":"RS485 통신 결선 및 데이터 수신 방법","date":"June 30, 2024"}},"next":{"fields":{"slug":"/projectT_02/"}},"previous":{"fields":{"slug":"/RS485_02/"}}},{"node":{"id":"87a741b7-3e03-53f7-8262-627a0eb4c2a4","excerpt":"소켓(Socket) 프로그램이 네트워크에서 데이터를 송수신할 수 있도록 네트워크 환경에 연결할 수 있게 만들어진 연결부를 의미한다. 통신을 위한 프로토콜에 맞게 만들어져야 한다. 클라이언트 소켓과 서버 소켓 데이터를 주고받기 위해서는 소켓의 연결 과정이 선행되어야 한다.\r\n연결을 만들기 위해서는 IP주소와 포트 번호로 식별되는 대상에게 연결을 요청하고 반대편이 연결요청(보낸이의 IP주소와 포트번호로 식별)을 미리 시스템에 등록하고 처리할 준비가 되어 있어야 한다. 연결요청을 보내는 쪽이 클라이언트 소켓 연결요청을 받으려고 대기하는 쪽이 서버 소켓 클라이언트 소켓과 서버 소켓은 역할과 구현 절차 구분을 위해 다르게 부르는 것일 뿐 내부 구조가 다르지 않다. 소켓 연결이 완료된 후, 클라이언트 소켓과 서버 소켓이 직접 데이터를 주고 받는다고 생각하기 쉽지만 사실 서버 소켓은 클라이언트 소켓의 연결 요청을 받아들이는 역할만 수행할 뿐이다. 직접적인 데이터 송수신은 서버 소켓의 연결 요청…","fields":{"slug":"/Tcp_01/"},"frontmatter":{"categories":"네트워크","title":"TCP/IP 소켓 프로그래밍","date":"June 16, 2024"}},"next":{"fields":{"slug":"/SQL_01/"}},"previous":{"fields":{"slug":"/journal_02/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}